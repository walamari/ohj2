package liigarekisteri;

import java.io.PrintStream;
import java.net.URL;

import java.util.ResourceBundle;

import fi.jyu.mit.fxgui.ComboBoxChooser;
import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.ohj2.WildChars;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;

import liiga.Joukkue;
import liiga.Liiga;
import liiga.Pelaaja;
import liiga.SailoException;




/**
 *  Luokka, jolla hoidetaan liiga k‰yttˆliittym‰n tapahtumia.
 * 
 * @author Valtteri Peltoniemi & Konsta K‰ht‰v‰
 * @version 8.3.2019
 *
 */
public class FxliigaGUIController implements Initializable {

    @Override
    public void initialize(URL url, ResourceBundle bundle) {
       alusta();       
    }
    

    @FXML private Button uusiPelaaja;
    @FXML private Button poistaPelaaja;
    @FXML private Button haeSeura;
    @FXML private ScrollPane panelPelaaja;
    @FXML private ListChooser<Pelaaja> chooserPelaajat;
    @FXML private TextField editJoukkueet;
    @FXML private TextField editKaupunki;
    @FXML private TextField editVuosi;
    @FXML private TextField editMestaruudet;
    @FXML private TextField editHopeat;
    @FXML private TextField editPronssit;
    @FXML private TextField editValmentaja;
    @FXML private TextField hakuehto;
    @FXML ComboBoxChooser<String> cbKentat;
    
    

    @FXML void handleUusiPelaaja() {
       uusiPelaaja(); 
       //uusiJoukkue();
       //uusiPelipaikka();
      
    }


    @FXML private void handleEtsiJoukkue() {
        avaaVirheikkuna();
        
    }
    
    @SuppressWarnings("unused")
    @FXML void handleTallennus( ActionEvent event) {
        tallenna();
    }
    
   
    
    @SuppressWarnings("unused")
    @FXML private void avaaMuokkausIkkuna(MouseEvent event) {
        muokkaa();
    }
    
    
    @FXML private void handlePoistaPelaaja() {
        poistaPelaaja();
        
    }
    
    @FXML private void handleTallenna() {
        tallenna();
    }

    @FXML private void handleTietoja() {
        Dialogs.showMessageDialog("ei tietoja saatavilla");
    }
    
    @FXML private void handleClose() {
        Dialogs.showMessageDialog("Ei tietoja mit‰ halutaan sis‰lt‰‰");
    }
    
    @FXML private void handlePeruuta() {
        Dialogs.showMessageDialog("Ei onnistu");
    }
    
    @FXML private void handleHakuehto() {
       hae(0);
    }


//==================== Ei k‰yttˆliittym‰‰n liittyv‰‰ suoraa koodia =============================\\
    

    /**
     * avaa virheikkunan
     */
    public void avaaVirheikkuna() {
        ModalController.showModal(FxliigaGUIController.class.getResource("VirheIkkunaGUIView.fxml"), "Joukkue haku", null, "");
    }
    
    private Liiga liiga;

    private Pelaaja pelaajakohdalla;
    private Joukkue joukkueKohdalla;
    private String joku;
    private static Pelaaja apupelaaja = new Pelaaja();
    

    
    
    /**
     * Tekee tarvittavat alustukset ja vaihtaa Scrollpanen p‰‰lle ison teksti alueen, jonka
     * p‰‰lle tulostetaan tietoja.
     */
    private void alusta() {

        chooserPelaajat.clear();
        chooserPelaajat.addSelectionListener(e-> naytaPelaaja());
        //chooserPelaajat.addSelectionListener(e-> naytaJoukkue());
       // edits = new TextField[]{editJoukkue}; 
        
    }
    
    /**
     * Kysyt‰‰n tiedoston nimi ja luetaan se
     * @return true jos onnistui, false jos ei
     */
    public boolean avaa() {
        String uusinimi = joku;
        if (uusinimi == null) return false;
        lueTiedosto(uusinimi);
        return true;
    }
    
    /**
     * N‰ytt‰‰ v‰liaikaisesti valitun pelaajan tiedot  tekstikentt‰‰n.
     */
    private void naytaPelaaja() {
        pelaajakohdalla = chooserPelaajat.getSelectedObject(); 
        if (pelaajakohdalla == null) return;
        naytaJoukkue(); 
         
      }  

   
    private void naytaJoukkue() {
        
        joukkueKohdalla = liiga.annaJoukkue(pelaajakohdalla);

        if (joukkueKohdalla == null) return; 
        
        editJoukkueet.setText(joukkueKohdalla.getJoukkue());
        editKaupunki.setText(joukkueKohdalla.getKaupunki());
        editVuosi.setText(joukkueKohdalla.getVuosi());
        editMestaruudet.setText(joukkueKohdalla.getMestaruudet()); 
        editHopeat.setText(joukkueKohdalla.getHopeat());
        editPronssit.setText(joukkueKohdalla.getPronssit());
        editValmentaja.setText(joukkueKohdalla.getValmentaja());

        
    }
    
    
    /**
     * Alustaa liigan lukemalla sen valitun nimisest‰ tiedostosta
     * @param nimi tiedosto josta kerhon tiedot luetaan
     */
    protected void lueTiedosto(String nimi) {
        
        try {
            liiga.lueTiedostosta(nimi);
            hae(0);
           
        } catch (SailoException e) {
            hae(0);
            String virhe = e.getMessage(); 
            if ( virhe != null ) Dialogs.showMessageDialog(virhe);
           
        }
     }

    
    /**
     * Luo uuden pelaajan, jota aletaan muokkaamaan
     */
   private void uusiPelaaja() {
       Pelaaja tyyppi = new Pelaaja();
       Liiga apuLiiga;
       liiga.setPelaajaKohdalla(tyyppi); 
       apuLiiga = PelaajanMuokkausGUIController.kysyPelaaja(null, liiga);
       if (apuLiiga==null) return;
       liiga = apuLiiga;
       tyyppi = liiga.getPelaajaKohdalla();
       if (tyyppi == null || tyyppi.getnimi() == "" ) return;
       tyyppi.rekisteroi();
       //tyyppi.vastaaErikPerrin();   //todo korvaa ett‰ aukeaa uusi dialogi
       liiga.lisaa(tyyppi);
       hae(tyyppi.getPelaajaid());
       
   }
   
   
   /**
    * Tekee uuden tyhj‰n joukkueen muokkaamista varten
    
   private void uusiJoukkue() {       
       if (pelaajakohdalla == null) return; 
       Joukkue tiimi = new Joukkue();
       tiimi.rekisteroi();
       tiimi.vastaaJoukkue(pelaajakohdalla.getPelaajaid()); 
       liiga.lisaa(tiimi);
       hae(tiimi.getPelaajannumero());
       
   }
   
   */
   
   private void muokkaa() {
       //ModalController.showModal(FxliigaGUIController.class.getResource("PelaajanMuokkausGUIView.fxml"), "Joukkue haku", null, "");
       if(pelaajakohdalla == null) return;
       try {
           Pelaaja pelaaja;
           Liiga apuLiiga;
           liiga.setPelaajaKohdalla(pelaajakohdalla);
           apuLiiga = PelaajanMuokkausGUIController.kysyPelaaja(null, liiga.clone());
           if(apuLiiga==null) return;
           liiga = apuLiiga;
           pelaaja = liiga.getPelaajaKohdalla();
           if(pelaaja == null) return;
           
           liiga.korvaaTaiLisaa(pelaaja);
           hae(pelaaja.getPelaajaid());
       } catch (CloneNotSupportedException e) {
           //
       } catch (SailoException e) {
           Dialogs.showMessageDialog(e.getMessage());
       }
   }
   
   
   
   /**
    * Tietojen tallennus
    */
   private void tallenna() {
       try {
           liiga.tallenna();
           return;
       } catch (SailoException ex) {
           Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + ex.getMessage());
           
       }
   }
   
   /**
    * Tekee uuden tyhj‰n pelipaikan muokkaamista varten
   
   private void uusiPelipaikka() {
       
       if (pelaajakohdalla == null) return; 
       Pelipaikka paikka = new Pelipaikka();
       paikka.rekisteroi();
       paikka.vastaaPelipaikka(pelaajakohdalla.getPelaajaid()); 
       liiga.lisaa(paikka);
       hae(paikka.getPelipaikkanumero());
       
   }


   /**
    * Hakee pelaajien tiedot 
    * @param pnr pelaajan numero
    */
   private void hae(int pnr) {
       int pnro = pnr;
       chooserPelaajat.clear();
       if(pnro <= 0) {
           Pelaaja kohdalla = pelaajakohdalla;
           if ( kohdalla != null) pnro = kohdalla.getPelaajaid();   
       }
       String haku = hakuehto.getText();
       int k = cbKentat.getSelectedIndex(); //+ apupelaaja.ekaKentta();
       
       int indeksi = 0;
       
       String ehto = "*";  
       if ( haku != null && haku.length() > 0 ) ehto = haku;  
       int hk = k;  
       if ( hk < 0 ) hk = 1; 
       if (ehto.indexOf('*') < 0) ehto = "*" + ehto + "*";  
       
       for (int i = 0; i < liiga.getPelaajia(); i++) {
           Pelaaja pelaaja = liiga.annaPelaaja(i);
           if (pelaaja.getPelaajaid() == pnro) indeksi = i;
           
           if (WildChars.onkoSamat(pelaaja.anna(hk), ehto))chooserPelaajat.add(pelaaja.getnimi(), pelaaja);
           
       }
       
       chooserPelaajat.getSelectionModel().select(indeksi); // muutosviesti, joka n‰ytt‰‰ j‰senen
       
   }
   

   
   /**
   * Tulostaa pelaajan tiedot 
   * @param os tietovirta, johon tulostetaan
   * @param pelaaja tulostettava pelaaja
   */
public void tulosta(PrintStream os, Pelaaja pelaaja) {
    
    pelaaja.tulosta(os); 
    
    /*
     * List<Joukkue> joukkueet = 
    for(Joukkue jouk : joukkueet)
    */
    
    Joukkue pelaajanJoukkue = liiga.annaJoukkue(pelaaja.getJoukkue());
    pelaajanJoukkue.tulosta(os);
    
    //List<Pelipaikka> pelipaikat = liiga.annaPelipaikat(pelaaja);
    //for(Pelipaikka paikka : pelipaikat)
    //paikka.tulosta(os);
  
}
   
    
    /**
     * Asetetaan viite liigaan
     * @param liiga k‰ytett‰v‰ liiga
     **/
    public void setLiiga(Liiga liiga) {
        this.liiga = liiga;
    }
    
   /*
    * Poistetaan listalta valittu j‰sen 
    */ 
    private void poistaPelaaja() { 
        Pelaaja pelaaja = pelaajakohdalla; 
        if ( pelaaja == null ) return; 
        if ( !Dialogs.showQuestionDialog("Poisto", "Haluatko Poistaa pelaajan: " + pelaaja.getnimi(), "Kyll‰", "Ei") ) 
            return; 
        liiga.poista(pelaaja); 
        int index = chooserPelaajat.getSelectedIndex(); 
        hae(0); 
        chooserPelaajat.setSelectedIndex(index); 
    } 
    
    
}